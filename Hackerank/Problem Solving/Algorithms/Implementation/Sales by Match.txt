import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result
{
    public static int sockMerchant(int n, List<Integer> ar)
    {
        Hashtable<Integer,Integer> tab= new Hashtable<Integer,Integer>();
        for(int i=0;i<n;i++)
        {
            if(tab.containsKey(ar.get(i)))
            {
                int temp=tab.get(ar.get(i));
                temp+=1;
                tab.put(ar.get(i),temp);
            }
            else
                tab.put(ar.get(i),1);
        }
        Set<Integer> keys = tab.keySet();
        int pair_count=0;
        for (Integer key : keys) 
        {
            int val=tab.get(key);
            if(val%2==0)                            //for even occurences
                pair_count=pair_count+(val/2);
            else                                    //for odd occurences
                pair_count=pair_count+((val-1)/2);  
        }
        return pair_count;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ar = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.sockMerchant(n, ar);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
